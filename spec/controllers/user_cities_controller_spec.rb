require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.
RSpec.describe UserCitiesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # UserCity. As you add validations to UserCity, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }
  let(:open_weather_city) { OpenWeatherCity.create(name: 'miami', country: 'us', city_id: 12345)}
  let(:valid_attributes) {
    { user_id: user.id, open_weather_city_id: open_weather_city.id }
  }

  let(:invalid_attributes) {
    { user_id: nil, open_weather_city_id: nil }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UserCitiesController. Be sure to keep this updated too.
  let(:valid_session) do
    controller.stub(:current_user).and_return(user)
    controller.stub(:signed_in?).and_return(true)
  end

  describe "GET #index" do
    before do
      stub_request(:get, "http://api.openweathermap.org/data/2.5/forecast?APPID=fb1c9edf19acb8411170acba2a672f53&cnt=5&id=2643743&units=imperial").
        with(
        headers: {
          'Accept'=>'*/*',
          'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Host'=>'api.openweathermap.org',
          'User-Agent'=>'Ruby'
        }).to_return(status: 200, body: file_fixture("open_weather_city_response.json"), headers: {})
    end

    it "returns a success response" do
      user_city = UserCity.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    before do
      stub_request(:get, "http://api.openweathermap.org/data/2.5/forecast?APPID=fb1c9edf19acb8411170acba2a672f53&cnt=5&id=2643743&units=imperial").
        with(
        headers: {
          'Accept'=>'*/*',
          'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
          'Host'=>'api.openweathermap.org',
          'User-Agent'=>'Ruby'
        }).to_return(status: 200, body: file_fixture("open_weather_city_response.json"), headers: {})

      stub_request(:get, "http://api.openweathermap.org/data/2.5/forecast?APPID=fb1c9edf19acb8411170acba2a672f53&cnt=5&id=12345&units=imperial").
        with(
        headers: {
       	  'Accept'=>'*/*',
       	  'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
       	  'Host'=>'api.openweathermap.org',
       	  'User-Agent'=>'Ruby'
        }).to_return(status: 200, body: file_fixture("open_weather_city_response.json"), headers: {})
    end

    it "returns a success response" do
      user_city = UserCity.create! valid_attributes
      get :show, params: {id: user_city.to_param}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new UserCity" do
        expect {
          post :create, params: {open_weather_city_id: open_weather_city.id}, session: valid_session
        }.to change(UserCity, :count).by(1)
      end

      it "redirects to the created user_city" do
        post :create, params: {open_weather_city_id: open_weather_city.id}, session: valid_session
        expect(response).to redirect_to(UserCity.last)
      end
    end

    context "with invalid params" do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: {open_weather_city_id: 0}, session: valid_session
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested user_city" do
      user_city = UserCity.create! valid_attributes
      expect {
        delete :destroy, params: {id: user_city.to_param}, session: valid_session
      }.to change(UserCity, :count).by(-1)
    end

    it "redirects to the user_cities list" do
      user_city = UserCity.create! valid_attributes
      delete :destroy, params: {id: user_city.to_param}, session: valid_session
      expect(response).to redirect_to(user_cities_url)
    end
  end

end
